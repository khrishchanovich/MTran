keywords = {
    '#include': 'PREPROCESSOR DIRECTIVE',
    '#define': 'MACRO',
    '#ifndef': 'MACRO',
    '#endif': 'MACRO',
    'system': 'KEYWORD',
    'using': 'KEYWORD',
    'namespace': 'KEYWORD',
    'std': 'NAMESPACE',
    'break': 'KEYWORD',
    'continue': 'KEYWORD',
    'do': 'KEYWORD',
    'while': 'KEYWORD',
    'for': 'KEYWORD',
    'if': 'KEYWORD',
    'else': 'KEYWORD',
    'return': 'KEYWORD',
    'switch': 'KEYWORD',
    'case': 'KEYWORD',
    'default':'KEYWORD',
    'std::swap': 'KEYWORD',
    'private': 'KEYWORD',
    'public': 'KEYWORD',
    'protected': 'KEYWORD',
    '(': 'PARENTHESIS',
    ')': 'PARENTHESIS',
    '{': 'PARENTHESIS',
    '}': 'PARENTHESIS',
    '[': 'PARENTHESIS',
    ']': 'PARENTHESIS',
    ',': 'COMA',
    ';': 'END OF CONSTRUCTION',
    'cout': 'OUTPUT',
    'endl': 'OUTPUT MANIPULATOR',
    'class': 'KEYWORD',
    'struct': 'KEYWORD',
    'const': 'KEYWORD',
    'override': 'KEYWORD',
    'virtual': 'KEYWORD',
    'typename': 'KEYWORD',
    'typedef': 'KEYWORD',
    'template': 'KEYWORD',
    'delete': 'KEYWORD',
    'malloc': 'KEYWORD',
    'calloc': 'KEYWORD',
    'realloc': 'KEYWORD',
    'sizeof': 'KEYWORD',
    'NULL': 'KEYWORD',
    'printf': 'KEYWORD',
    'new': 'KEYWORD',
    'static': 'KEYWORD',
    'operator': 'KEYWORD',
    'this':'KEYWORD',
    'friend': 'KEYWORD',
    'auto': 'KEYWORD',
    'nullptr': 'KEYWORD',
    'try': 'KEYWORD',
    'catch': 'KEYWORD',
    'exception': 'KEYWORD',
    'setlocale': 'KEYWORD'
}

operators = {
    '//': 'COMMENT',
    '/*': 'COMMENT',
    '*/': 'COMMENT',
    '->': 'ARROW POINTER',
    '.': 'OPERATOR',
    '+': 'ARITHMETIC OPERATOR',
    '-': 'ARITHMETIC OPERATOR',
    '*': 'OPERATOR',
    '/': 'ARITHMETIC OPERATOR',
    '%': 'ARITHMETIC OPERATOR',
    '++': 'ARITHMETIC OPERATOR',
    '--': 'ARITHMETIC OPERATOR',
    '+=': 'ARITHMETIC OPERATOR',
    '-=': 'ARITHMETIC OPERATOR',
    '*=': 'ARITHMETIC OPERATOR',
    '/=': 'ARITHMETIC OPERATOR',
    '%=': 'ARITHMETIC OPERATOR',
    '=': 'ASSIGNMENT OPERATOR',
    'pow': 'FUNCTION',
    'sqrt': 'FUNCTION',
    'sin': 'FUNCTION',
    'cos': 'FUNCTION',
    'log': 'FUNCTION',
    'exp': 'FUNCTION',
    'round': 'FUNCTION',
    '==': 'COMPARISON OPERATOR',
    '!=': 'COMPARISON OPERATOR',
    '<': 'OPERATOR',
    '>': 'OPERATOR',
    '<=': 'COMPARISON OPERATOR',
    '>=': 'COMPARISON OPERATOR',
    '>>': 'OPERATOR',
    '<<': 'OPERATOR',
    '&&': 'LOGICAL OPERATOR',
    '||': 'LOGICAL OPERATOR',
    '!': 'LOGICAL OPERATOR',
    '&': 'OPERATOR',
    '|': 'BITWISE OPERATOR',
    '^': 'BITWISE OPERATOR',
    '~': 'OPERATOR',
    '?': 'TERNARY OPERATOR',
    ':': 'COLON',
    '::': 'DOUBLE COLON'
}

data_types = {
    'bool': 'DATA TYPE',
    'signed char': 'DATA TYPE',
    'void': 'DATA TYPE',
    'char': 'DATA TYPE',
    'short': 'DATA TYPE',
    'int': 'DATA TYPE',
    'long': 'DATA TYPE',
    'long long': 'DATA TYPE',
    'unsigned char': 'DATA TYPE',
    'unsigned short': 'DATA TYPE',
    'unsigned int': 'DATA TYPE',
    'unsigned long': 'DATA TYPE',
    'unsigned long long': 'DATA TYPE',
    'float': 'DATA TYPE',
    'double': 'DATA TYPE',
    'long double': 'DATA TYPE',
    'wchar_t': 'DATA TYPE',
    'char8_t': 'DATA TYPE',
    'char16_t': 'DATA TYPE',
    'char32_t': 'DATA TYPE',
    'string': 'DATA TYPE',
    'uint32_t': 'DATA TYPE',
    'size_t': 'DATA TYPE',
}

classes = {
    'ifstream': 'CLASS',
    'ofstream': 'CLASS',
    'ostream': 'CLASS',
    'iostream': 'CLASS'
}

standart_function = {
    'strcpy': 'STANDART FUNCTION',
    'strlen':'STANDART FUNCTION',
    'strcat':'STANDART FUNCTION',
    'strstr':'STANDART FUNCTION',
    'strtok':'STANDART FUNCTION',
    'sprintf':'STANDART FUNCTION',
    'strcmp':'STANDART FUNCTION',
    'strchr':'STANDART FUNCTION',
    'strrchr': 'STANDART FUNCTION',
}

containers = {
    'vector': 'CONTAINER',
    'list': 'CONTAINER',
    'deque': 'CONTAINER',
    'queue': 'CONTAINER',
    'stack': 'CONTAINER',
    'set': 'CONTAINER',
    'unordered_set': 'CONTAINER',
    'multiset': 'CONTAINER',
    'map': 'CONTAINER',
    'unordered_map': 'CONTAINER',
    'multimap': 'CONTAINER',
    'bitset': 'CONTAINER',
}

standart_libraries = {
    'iostream': 'LIBRARY',
    'algorithm': 'LIBRARY',
    '<string>': 'LIBRARY',
    'cmath': 'LIBRARY',
    'ctime': 'LIBRARY',
    'cstdlib': 'LIBRARY',
    'cstdio': 'LIBRARY',
    'fstream': 'LIBRARY',
    'iomanip': 'LIBRARY',
    'sstream': 'LIBRARY',
    'stdexcept': 'LIBRARY',
    '<limits>': 'LIBRARY',
    '<locale>': 'LIBRARY',
    '<memory>': 'LIBRARY',
    '<thread>': 'LIBRARY',
    '<chrono>': 'LIBRARY',
    'regex': 'LIBRARY',
    '<tuple>': 'LIBRARY',
    'utility': 'LIBRARY',
}

special_symbols = ('#', '$', 'â„–', '@')